package at.archistar.crypto;

import at.archistar.crypto.data.ShamirShare;
import at.archistar.crypto.data.Share;
import at.archistar.crypto.decode.ErasureDecoder;
import at.archistar.crypto.decode.PolySolver;
import at.archistar.crypto.exceptions.ReconstructionException;
import at.archistar.crypto.exceptions.WeakSecurityException;
import at.archistar.crypto.math.GF256Polynomial;
import at.archistar.crypto.random.RandomSource;
import at.archistar.helper.ByteUtils;

/**
 * @author Elias Frantar <i>(improved Exception handling, modified to use a solver)</i>
 * @author Andreas Happe <andreashappe@snikt.net>
 * @author Fehrenbach Franca-Sofia
 * @author Thomas Loruenser <thomas.loruenser@ait.ac.at>
 */
public class ShamirPSS extends SecretSharing {

    final private RandomSource rng;
    private final PolySolver solver;

    /**
     * Constructor<br>
     * (applying {@link ErasureDecoder} as default reconstruction algorithm)
     * 
     * @param n the number of shares to create
     * @param k the minimum number of shares required for reconstruction
     * @param rng the source of randomness to use for generating the coefficients
     * @throws WeakSecurityException thrown if this scheme is not secure enough for the given parameters
     */
    public ShamirPSS(int n, int k, RandomSource rng) throws WeakSecurityException {
        this(n, k, rng, new ErasureDecoder());
    }
    public ShamirPSS(int n, int k, RandomSource rng, PolySolver solver) throws WeakSecurityException {
    	super(n, k);
    	
    	this.rng = rng;
    	this.solver = solver;
    }

    @Override
    public Share[] share(byte[] data) {
    	//Create shares
        ShamirShare shares[] = new ShamirShare[n];
        for (int i = 0; i < n; i++) {
            shares[i] = new ShamirShare((byte) (i + 1), new byte[data.length]);
        }

        int a[] = new int[k];
        for (int i = 0; i < data.length; i++) {
            //Let a[0] be the secret (as a byte)
            a[0] = ByteUtils.toUnsignedByte(data[i]);

            //Every other coefficient is a randomly generated byte
            for (int j = 1; j < k; j++) {
                a[j] = rng.generateByte();
            }

            GF256Polynomial poly = new GF256Polynomial(a);

            //Calculate the share for this (source)byte for every share
            for (int j = 0; j < n; j++) {
                shares[j].getY()[i] = (byte) (poly.evaluateAt(shares[j].getId()));
            }
        }

        return shares;
    }

    @Override
    public byte[] reconstruct(Share[] shares) throws ReconstructionException {
    	if (!validateShareCount(shares.length, k)) {
    		throw new ReconstructionException();
    	}
    	
    	try {
    		ShamirShare[] sshares = safeCast(shares); // we need access to the attributes in ShamirShare
    		
	        int xValues[] = new int[sshares.length];
	        byte result[] = new byte[sshares[0].getY().length];
	
	        for (int i = 0; i < shares.length; i++) {
	            xValues[i] = sshares[i].getId();
	        }
	
	        solver.prepare(xValues);
	
	        for (int i = 0; i < result.length; i++) {
	
	            int yValues[] = new int[sshares.length];
	            for (int j = 0; j < sshares.length; j++) {
	                yValues[j] = ByteUtils.toUnsignedByte(sshares[j].getY()[i]); // we may only pass unsigned bytes to GF256
	            }
	
	            result[i] = (byte) solver.solve(yValues)[0];
	        }
	
	        return result;
    	} catch (Exception e) { // if anything goes wrong during reconstruction, throw a ReconstructionException
    		throw new ReconstructionException();
    	}
    }

    /**
     * Converts the Share[] to a ShamirShare[] by casting each element individually.
     * 
     * @param shares the shares to cast
     * @return the given Share[] as ShamirShare[]
     * @throws ClassCastException if the Share[] did not (only) contain ShamirShares
     */
    private ShamirShare[] safeCast(Share[] shares) {
    	ShamirShare[] sshares = new ShamirShare[shares.length];
    	
    	for (int i = 0; i < shares.length; i++) {
    		sshares[i] = (ShamirShare) shares[i];
    	}
    	
    	return sshares;
    }
}
